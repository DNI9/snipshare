generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Snippet {
  id              String      @id @default(cuid())
  title           String
  description     String?
  language        String
  content         String
  likes           Like[]
  isPrivate       Boolean?    @default(true) @map("is_private")
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  //
  collectionId    String?
  collection      Collection? @relation(fields: [collectionId], references: [id])
  //
  sourceSnippetId String?     @map("source_snippet_id")
  sourceSnippet   Snippet?    @relation("SnippetToSnippet", fields: [sourceSnippetId], references: [id])
  forks           Snippet[]   @relation("SnippetToSnippet")
  //
  createdAt       DateTime    @default(now()) @map(name: "created_at")
  updatedAt       DateTime    @updatedAt @map(name: "updated_at")

  @@index([title])
  @@map("snippets")
}

model Like {
  id        String   @id @default(cuid())
  snippetId String
  snippet   Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("likes")
}

model Collection {
  id          String    @id @default(cuid())
  title       String
  description String?
  isPrivate   Boolean?  @default(true) @map("is_private")
  snippets    Snippet[]
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@map("collections")
}

// https://next-auth.js.org/adapters/prisma

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  username      String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]
  collections   Collection[]
  likedSnippets Like[]

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
