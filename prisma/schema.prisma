generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Snippet {
  id           Int         @id @default(autoincrement())
  title        String
  description  String?
  language     String
  content      String
  likes        Like[]
  isPrivate    Boolean?    @default(true) @map("is_private")
  forks        Fork[]
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  updatedAt    DateTime    @updatedAt @map(name: "updated_at")

  @@index([title])
  @@map("snippets")
}

model Like {
  id        Int     @id @default(autoincrement())
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  snippetId Int
  users     User[]

  @@map("likes")
}

model Collection {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  isPrivate   Boolean?  @default(true) @map("is_private")
  snippets    Snippet[]
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@map("collections")
}

model Fork {
  id        Int      @id @default(autoincrement())
  snippetId Int
  snippet   Snippet  @relation(fields: [snippetId], references: [id])
  forkerId  Int
  forker    User     @relation(fields: [forkerId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("forks")
}

// https://next-auth.js.org/adapters/prisma

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  username      String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]
  forks         Fork[]
  collections   Collection[]
  likes         Like[]

  @@map(name: "users")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
